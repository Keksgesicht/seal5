--- |
  ; ModuleID = '/tmp/seal5_llvm_gen/.seal5/temp/all_v9/Seal5Test_mac_cv_macs_i16/cv_macs_i16.ll'
  source_filename = "mod"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "riscv32-unknown-unknown-elf"
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
  define void @implcv_macs_i16(ptr noalias nocapture %rd, ptr nocapture readonly %rs1, ptr nocapture readonly %rs2) local_unnamed_addr #0 {
    %rs1.v = load i32, ptr %rs1, align 4
    %rs2.v = load i32, ptr %rs2, align 4
    %sext = shl i32 %rs1.v, 16
    %1 = ashr exact i32 %sext, 16
    %sext1 = shl i32 %rs2.v, 16
    %2 = ashr exact i32 %sext1, 16
    %3 = mul nsw i32 %2, %1
    %rd.v = load i32, ptr %rd, align 4
    %4 = add i32 %3, %rd.v
    store i32 %4, ptr %rd, align 4
    ret void
  }
  
  attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }

...
---
name:            implcv_macs_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
liveins:
  - { reg: '$x10', virtual-reg: '' }
  - { reg: '$x11', virtual-reg: '' }
  - { reg: '$x12', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11, $x12
  
    %0:_(p0) = COPY $x10
    %1:_(p0) = COPY $x11
    %2:_(p0) = COPY $x12
    %5:_(s32) = G_CONSTANT i32 16
    %3:_(s32) = G_LOAD %1(p0) :: (load (s32) from %ir.rs1)
    %4:_(s32) = G_LOAD %2(p0) :: (load (s32) from %ir.rs2)
    %6:_(s32) = G_SHL %3, %5(s32)
    %7:_(s32) = exact G_ASHR %6, %5(s32)
    %8:_(s32) = G_SHL %4, %5(s32)
    %9:_(s32) = exact G_ASHR %8, %5(s32)
    %10:_(s32) = nsw G_MUL %9, %7
    %11:_(s32) = G_LOAD %0(p0) :: (load (s32) from %ir.rd)
    %12:_(s32) = G_ADD %10, %11
    G_STORE %12(s32), %0(p0) :: (store (s32) into %ir.rd)
    PseudoRET

...
